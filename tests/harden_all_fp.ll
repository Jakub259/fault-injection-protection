; RUN: opt -passes='cfip<harden-all>' -load-pass-plugin=../build/lib/LLVMCfip.so %s -S -o %t.ll
; RUN: clang %t.ll -o %t.out
; RUN: %t.out
; RUN: cat %t.ll | FileCheck %s

target triple = "x86_64-redhat-linux-gnu"
declare float @llvm.sqrt.f32(float %a)

; File generated by GitHub Copilot (Claude 3.7 Sonnet)

; CHECK-LABEL: @add_float
define float @add_float(float %a, float %b) {
  ; CHECK-COUNT-2: fadd float %a, %b
  %result = fadd float %a, %b
  ; CHECK: fcmp one 
  ret float %result
}

; CHECK-LABEL: @div_float
define float @div_float(float %a, float %b) {
  ; CHECK-COUNT-2: fdiv float %a, %b
  %result = fdiv float %a, %b
  ; CHECK: fcmp one 
  ret float %result
}

; Test a more complex calculation with multiple floating-point operations
; CHECK-LABEL: @complex_calc
define float @complex_calc(float %a, float %b) {
  ; CHECK-COUNT-2: fmul float
  %mul = fmul float %a, %b
  
  ; CHECK-COUNT-2: fdiv float
  %div = fdiv float %a, %b
  
  ; CHECK-COUNT-2: fsub float
  %result = fsub float %mul, %div
  
  ret float %result
}

; CHECK-LABEL: @nan_handling
define float @nan_handling(float %a) {
  ; CHECK-COUNT-2: fcmp uno float
  %is_nan = fcmp uno float %a, %a
  
  ; CHECK-COUNT-2: select i1
  %result = select i1 %is_nan, float 0x7FF8000000000000, float %a
  ; CHECK: fcmp one float
  
  ret float %result
}

; CHECK-LABEL: @float_comparison
define i1 @float_comparison(float %a, float %b) {
  ; CHECK-COUNT-2: fcmp olt
  %result = fcmp olt float %a, %b
  ; CHECK: icmp ne i1
  
  ret i1 %result
}

; Main function to call all tests
; CHECK-LABEL: @main
define i32 @main() {
  %a = fpext float 0x4008CCCCC0000000 to double  ; 3.14 in hex format
  %b = fpext float 0x4005AE1480000000 to double  ; 2.71 in hex format
  
  ; Test add_float
  ; CHECK: %result1 = call float @add_float
  %result1 = call float @add_float(float 0x40091EB860000000, float 0x4005AE1480000000)  ; 3.14, 2.71
  ; CHECK: call float @div_float
  %result2 = call float @div_float(float 0x40091EB860000000, float 0x4005AE1480000000)  ; 3.14, 2.71
  ; CHECK: call float @complex_calc
  %result3 = call float @complex_calc(float 0x40091EB860000000, float 0x4005AE1480000000)  ; 3.14, 2.71
  ; CHECK: call float @nan_handling
  %result4 = call float @nan_handling(float 0x7FF8000000000000)  ; NaN
  ; CHECK: call i1 @float_comparison
  %result5 = call i1 @float_comparison(float 0x40091EB860000000, float 0x4005AE1480000000)  ; 3.14, 2.71
  
  ; Just to have some return value - sum the results
  ; CHECK-COUNT-2: fadd float
  %sum1 = fadd float %result1, %result2
  ; CHECK-COUNT-2: fadd float
  %sum2 = fadd float %sum1, %result3
  ; CHECK-COUNT-2: fadd float
  %sum3 = fadd float %sum2, %result4
  
  ; CHECK-COUNT-2: fadd float
  %final_sum = fadd float %sum3, %sum2
  
  ; Convert to int for return
  %return_val = fptosi float %final_sum to i32
  
  ; Final checks
  ; CHECK: br i1 %{{.*}}, label %error_handling, label %ret_block
  ; CHECK-LABEL: ret_block:
  ; CHECK: ret i32 %{{.*}}
  ret i32 %return_val
  
  ; CHECK-LABEL: error_handling:
  ; CHECK: call void @llvm.trap()
  ; CHECK: unreachable
}

!llvm.module.flags = !{!0, !1}
!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 2}
